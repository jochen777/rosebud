The brand new, pragmatic, compact, fast and component based webframework to generate websites.
The component framework for component framework haters.
Saves you ages of work. 
New complex websites in minutes.

* global variables do not override local variables (OK)
* cool error handling (bean not there, template not there...) - (OK)
* New Error-Handling Class (OK)
* Einführen von Unit-Tests (OK)
* rename "type" to "beanName" (OK)
* create a new config name: "classname" that tries to instanciate... (OK)
* clean up (OK)
* GIT (github) (OK)
* Events: Say header to include a new js (create this by a publish&subscribe mechanism) http://tomaszdziurko.pl/2012/01/google-guava-eventbus-easy-elegant-publisher-subscriber-cases/ (OK)
* Tree creation at runtime (OK)
* Cleanup template directory (OK)


* Access to Request-Params etc. (OK)
* Test: Componenten zusammenlegen (java + template) (OK)
* crate Navigations-Fragment (OK)
* Fragment is just a node! Datacollector is an optional helper of a fragment (OK)
* caching (by request from fragment-configs) (OK - but work to do)
* Trader, der entscheidet, welches Templates angezogen werden. (OK)
* Cewl: Fragment-Defintion can only hold a reference to another "page" or fragment defintion (ie: "ref": "/sample/frags/complex_frag")
* Javascript als Sprache für Fragments zulassen.
* page-structure "inheritance" for cross cutting concerns (global configs: for project, for direcotry, for page. (templatename, fragment-name, data, parameter-handling, caching)
* Fragment-Tree at the bottom
* debug-mode: Gibt Kommentare über- und unter Templates aus.
* create a page-wide logging-buffer. Can be outputted under page in browser.
* create more clever caching



* Makros (partials)
* Try different template engine (freemarker)
* Maybe template abstraction to get more than one Template engine running? (YAGNI?)
* Superior error-display (aufklappbarer Stacktrace...)
* build some nice components (menu, header, head, footer, list, teasers, gallery...)
* Add Bootstrap components
* Add possibility to change between different template-sets
* Allow Direct JSON-Defintions in controller
* import template set / provide template-sets (as jars?)
* Check why Event Bus is so slow!
* provide indenpendance from EventBus (two ways to render: With or without interfragment communication)
* template-Renderer with interface, even more central! (with help of a bean?, singleton)
* Caching (Config-Tree; Fragments with exact same Template, Input-Data and without listeners) 
* Warning, if global data is overwritten by local (can be switched on or off!) Maybe dev-mode?


TBD:
* Is global data really useful?
* Useful to have an "end-template"? or better a template with an embedded Tag (<ROSEBUD_CONTENT>), like Gauss VIP?
* Event-System or better a message-bus?